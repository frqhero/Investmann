Воронка: !concept
  определение: |
    Воронка -- это инструмент маркетолога, с помощью которого он оценивает эффективность рассылки.
    Воронка состоит из набора этапов, по которым перемещаются пользователи чат-бота от "получил рассылку" до "купил".
    Разбивка по этапам выбирается таким образом, чтобы маркетологу по конверсиям было удобно судить об эффективности
    рассылки.
    Англ.: Funnel.
  Воронка простой рассылки: !example |
    Маркетолог вручную выбирает сегмент пользователей чат-бота и запускает разовую рассылку по ним. Для такой рассылки
    воронка включает в себя этапы:
    - включён в список рассылки
    - сообщение отправлено
    - получил сообщение
    - прочитал сообщение
    - совершил целевое действие
    - оформил заказ в течение X часов
    Эффективность рассылки маркетолог оценивает по таким цифрам из воронки:
    0. Количество пользователей в воронке
    1. Количество отправленных сообщений
    2. Количество доставленных сообщений
    3. Количество открытых сообщений
    4. Количество нажатий по целевой кнопки
    5. Конверсия открытых сообщений относительно доставленных
    6. Конверсия доставленных сообщений относительно отправленных
    7. Конверсия нажатий по целевой кнопки относительно открытых сообщений
    Дополнительно рассчитывается финансовый выхлоп от рассылки:
    1. Кол-во заказов, оформленных после нажатия по целевой кнопки
    2. Сумма заказов, если кнопка вела на разделы в корзине
  Общая воронка чат-бота: !example |
    Когда новые пользователи впервые контактируют с ботом, то они проходят стандартные этапы:
    - запуск бота
    - регистрация/авторизация
    - знакомство с каталогом услуг
    - начало оформления заказа
    - оформленный заказ
    Эти действия также можно рассматривать как движение по воронке.
    Общая воронка чат-бота никогда не отключается, поэтому её конверсии считаются за период времени, указанный
    маркетологом.
  Воронка триггерной рассылки: !example |
    Триггерная рассылка, в отличии от обычной разовой, "вшита в код". В коде бота программист записал когда и какое
    сообщение отправлять пользователю чат-бота.
    Триггерная рассылка никогда не отключается, поэтому её конверсии считаются за период времени, указанный маркетологом.
    Шаблоны самих сообщений тригерных рассылок могут быть редактируемы через админку.
  Воронка под кастомную интерактивную рассылку: !example |
    Маркетолог попросил программистов написать код для нового типа рассылки с кнопками и разветвлёнными диалогами. У
    такой рассылки воронка включает в себя дополнительный набор этапов: не только "получил рассылку" --> "прочитал" -->
    "кликнул", но ещё "провалился в ветку диалога", "отказался" и что-то ещё.
  Разветвлённая воронка: !extension
    Сообщение в рассылке включает в себя сразу два альтернативных оффера, пользователю предлагается самому выбрать что
    ему интереснее. Под сообщением располагаются кнопки с ветвлением диалога -- отдельная ветка для каждого оффера.
    Для каждого оффера создаётся своя "ветка" воронки.
  Воронка с A/B тестом: !example |
    Аудитория рассылки случайным образом автоматически разделяется на несколько равных когорт. Одни получают сообщение
    с одной текстовкой, а вторые -- с другой. Конверсия внутри воронки может считаться как целиком, так и по каждой
    когорте отдельно.
  Воронка с петлями: !exclusion |
    Этапы воронки всегда упорядочены, и перемещание лида по воронке возможно только в одном направлении от начала к
    концу. Нельзя перемещать лиды обратно на более ранние этапы воронки. Если такое разрешить, то поломается сама
    концепция воронки -- нельзя будет посчитать конверсии.
  Архивная воронка: !example |
    Воронка больше не реагирует на события. Все конверсии были подсчитаны и зафиксированы.
  Динамическая воронка: !example |
    Маркетолог через админку создаёт новую воронку для разовой рассылки. Такая рассылка не прописана в коде заранее, а
    создаётся динамически через базу данных.
  Динамичная воронка с настраиваемыми этапами: !extension |
    Программный код чат-бота умеет отслеживать разные события, такие как "покупка", "клик по кнопке",
    "переход в ветку диалогу". Маркетолог сам через админку указывает какие события должны перемещать лида на следующий
    этап воронки.
  Архивная динамическая воронка: !example
  Воронка с уникальным идентификатором: !example |
    Для хранения информации в базе данных каждой воронке присваивается идентификатор, уникальный в рамках базы данных и
    в рамках Django-приложения.
  Воронка без уникального идентификатора: !exclusion
  Воронка с человекочитаемым названием: !extension
  Воронка с комментариями маркетолога: !extension
  Эфемерная воронка: !exclusion
    Эфемерная воронка -- это воронка без записей в базе данных. В такой воронке мало пользы, потому что всё равно
    придётся хранить лиды, а те прикреплены к воронке, так или иначе.


Схема воронки: !concept
  определение: |
    Схема воронки определяет набор этапов воронки, их взаимосвязь с роутером и прочие настройки, позволяющие расчитать
    конверсии.
    Англ.: Funnel Scheme.
  С детализацией к этапам: !example
  С когортами по дате регистрации: !example
  С когортами по группе A/B теста: !example
  Схема с потерянным этапом: !example |
    В базе данных сохранились данные c устаревшими состояниями стейт-машины. В коде их уже нет, а в БД -- ещё есть.
  Схема разветвлённой воронки: !extension |
    Помимо обычных этапов в воронке продаж есть такие этапы, как: "Отписался", "Технический сбой", "Отказ". Такая
    воронка получается разветвлённой.
  Динамичная схема воронки: !extension |
    Маркетолог через админку сам создал схему воронки: задал этапы и реакцию на события.


Этап воронки: !concept
  Включён в список рассылки: !example |
    Контакты пользователя попали в список рассылки, и соответстветствующий ему лид оказался в воронке на этапе "Включён
    в список рассылки".
    Англ.: Funnel Stage.
  Cообщение отправлено: !example
  Получил сообщение: !example
  Прочитал сообщение: !example
  Совершил целевое действие: !example |
    Пользовать нажал на кнопку в рассылке -- совершил целевое действие.
  Оформил заказ в течение суток: !example |
    Пользовать оформил заказ в течение 24 часов после получения рассылки.
  Воспользовался промокодом: !example
  Нет ответа/игнор: !example |
    Лид никак не отреагировал на рассылку в Telegram в течение 24 часов.
  Отписался от рассылки: !example |
    Лид нажал на кнопку "Отписаться от рассылки", встроенную в одну из триггерных рассылок.
  Технический сбой рассылки: !example |
    Рассылка прошла с ошибкой и сообщение не было доставлено лиду.
  Запустил бота: !example |
    Лид перешёл по ссылке в чат-бота и нажал кнопку Start.
  Добрался до каталога услуг: !example
  Начал оформлять заказ: !example
  Оформил заказ: !example
  Бросил оформление заказа: !example |
    Лид положил что-то в свою корзину, но затем ушёл и в течение суток так и не продолжил оформление заказа.
  Этап воронки с детализацией: !example |
    Лид получил сообщение в Telegram от чат-бота с призывом нажать одну из кнопок под сообщением. Первая кнопка
    предлагает получить скидку в 10% на один товар, а вторая -- 5%, но на весь заказ целиком. Выбор любого из этих
    вариантов считается целевым действием и приводит к переходу на следующий этап воронки продаж, но при этом
    маркетологу интересно знать сколько лидов выбрало первый вариант, а сколько -- второй. Такая информация может
    предоставляться к детализации к этапу воронки.


Роутер воронки: !concept
  определение: |
    Роутер стейт-машины в терминах библиотеки Yostate. Используется для обработки событий воронки.
    Англ.: Funnel Router.
  Автоматически сгенерированный: !extension |
    Схема воронки сама автоматически генерирует роутер и регистрирует состояния.


Событие воронки: !concept
  Новый лид в списке рассылки: !example |
    Пользователь включён в список рассылки и находится на первом этапе воронки.
    Англ.: Funnel Event.
  Сообщение рассылки отправлено лиду: !example
  Лид получил сообщение рассылки: !example
  Лид прочитал сообщение рассылки: !example
  Клик по кнопке: !example |
    Лид получил рассылку с призывом к действию. Лид кликнул на кнопку под сообщением, а значит совершил целевое
    действие.
  Переход по ссылке: !example |
    Лид получил рассылку с призывом к действию -- перейти по ссылке в тексте рассылки. Маркетолог хочет отслеживать
    переходы по этой ссылке и считать по ним конверсию.
  Оформил заказ: !example |
    Лид оформил заказ в течение 24 часов после получения последней рассылки. При этом ранее он уже получал
    другие рассылки, также призывающие к оформлению заказа, но те были проигнорированы.
  Прошли 24 часа с момента получения рассылки: !example |
    С момента получения лидом рассылки уже прошли 24 часа, в целевое действие он так и не совершил. Считаем, что лид
    проигнорировал рассылку.
  Абстрактное событие воронки: !example |
    Все события воронки продаж имеют общий интефрейс -- такой же, как у абстрактного события воронки.
  С предустановленной воронкой: !example |
    События этого типа могут обрабатываться лишь одной из воронок, поэтому указывать её каждый раз явно не обязательно.
  С предустановленным tg_user_id: !example |
    В коде определён контекст, внутри которого все созданные события автоматически прикрепляются к одному и тому же
    значению tg_user_id -- дефолтному tg_user_id.
  Несериализуемое событие: !exclusion |
    Событие не может содержать в себе данные, которые мешают его сериализовать и либо сохранить в базу данных,
    передать по сети в другую программу.
  Событие с отложенной привязкой к воронке: !exclusion |
    Привязка события к воронке, в общем случае, может потребовать данных из БД. Ради более тонкого контроля и
    оптимизации запросов к БД отказывается от возможности отложенной привязки события к воронке. Отложенная привязка
    принесёт с "магию" от которой будет зависеть кто, когда и какие данные запрашивает из БД. Рано или поздно с этой
    "магией" придётся бороться.
    Тот код, что создаёт событие, обязан знать для какой воронки он это делает.
  Одно событие для нескольких воронок: !exclusion |
    Всегда можно вместо одного события создать сразу несколько однотипных событий -- по одному на каждую воронку. Так
    получается даже проще и меньше путаницы в коде.
    При этом вариант с wildcard в любом случае невозможен: стейт-машина воронок потребует явно указать к каким воронкам
    относится событие, а значит   тот, кто создаёт события в любом случае обязан знать к какой воронке оно относится, иначе
  Одно событие для нескольких лидов: !exclusion |
    Всегда можно вместо одного события создать сразу несколько однотипных событий -- по одному на каждый лид. Так
    получается даже проще и меньше путаницы в коде.


Лид: !concept
  определение: |
    Когда пользователь попадает в воронку, то в базе данных сохраняется информация о его прогрессе: когда и на какой
    этап он перешёл.
    Имеется ввиду не абстратный лид, а тот, что перемещается по этапам воронки в модуле «Funnels».
    Англ.: Lead.
  Лид без этапа воронки: !exclusion |
    Если в воронке появился новый лид, то он обязательно прикреплён к одному из этапов. Не бывает лидов без привязки к
    этапу воронки.
  Лид Шрёдингера: !exclusion |
    Не бывает лидов, которые одновременно находятся на двух разных этапах воронки. Тут либо один этап, либо другой.
  Лид без tg_user_id: !exclusion |
    Лид -- это обязательно пользователь Telegram-бота. Это ограничение не столько концепии "Лид", сколько модуля
    «Funnels» в Django Tg Bot Framework.
  Лид сразу с двумя tg_user_id: !exclusion |
    Считаем ситуацию с несколькими аккаунтами Telegram у одного человека достаточно редкой, чтобы такие ситуации мало
    волновали маркетолога при подсчёте конверсий.
  Лид c кастомными полями: !example |
    Хитрая воронка предполагает сразу несколько последовательных рассылок, и для каждой из них в схеме БД предусмотрен
    свой набор полей для хранения данных о результатах рассылки.
  Абстрактный лид: !example |
    Все лиды имеют общий интефрейс -- такой же, как у абстрактного лида. Общий интерфейс включает в себя схему БД.


Стейт-машина воронок: !concept
  определение: |
    Стейт-машина воронок обрабатывает события и сохраняя перемещения лида по воронке в базе данных. Алгоритм реализован
    в виде стейт-машины Yostate.
    Англ.: Funnel State Machine.
  С кастомной моделью данных: !example |
    В Django приложении используется несколько разных стейт-машин с воронками, и у каждой свой набор таблиц в базе
    данных.
  Синхронная: !example
  Асинхронная: !extension |
    Со временем поддержка асинхронщины в Django может стать лучше, и тогда может пригодиться асинхронный аналог
    стейт-машины.
  Одна стейт-машина для нескольких похожих воронок: !example |
    В одном чат-боте может быть реализовано несколько триггерных рассылок, и каждой из них нужна своя отдельная воронка
    с отдельно посчитанными конверсиями.
    При этом набор событий, логика реакции и этапы воронок у рассылок будут полностью идентичными:
    - включён в список рассылки
    - сообщение отправлено
    - получил сообщение
    - прочитал сообщение
    - совершил целевое действие
    - оформил заказ в течение X часов
  Одна стейт-машина для нескольких различных воронок: !example |
    В одном чат-боте может быть реализовано несколько триггерных рассылок, причём некоторые из них содержат вложенные
    меню, особый набор этапов воронки и событий.
  Стейт-машина с динамически создаваемыми воронками: !example


История перемещений лида: !concept
  определение: |
    В ходе рассылки пользователь получает сообщение от бота, и с этого момента начинается история его перемещений по
    этапам воронки от "попал в список рассылки" до "купил".
    История используется для пересчёта конверсий в случае программных сбоев, а так же для глубокого анализа ситуации
    маркетологом, когда цифр конверсий недостаточно для проверки гипотез.
    История перемещений по этапам воронки.
