# Реализованные истории описаны в автотестах. См. docstrings в каталоге `tests`.
# FIXME Реализованы не целиком -- ещё нужна документация с примерами.

# TODO Скопировать истории из README, детализировать их и протестировать

# TODO
# Маркетолог -- Выгрузить учётки пользователей для последующей рассылки: !func
#   Отдельный этап воронки: !story
#   Добрался до любого из нескольких этапов разных воронок: !story |
#     Если один пользователь попал сразу в указанных этапы разных воронок, то в рассылку он попадёт единожды.


# TODO
# Прикладной программист -- Посчитать переходы по целевым ссылкам: !func
#   Рассылка призывает к действию -- переходу по ссылке: !extension


# TODO Прикладной программист -- Покрыть воронку автотестами: !func


# TODO Прикладной программист -- Заново проиграть события: !func
#   Сбой в программном коде всплыл после начала рассылки: !extension
#   Перезапустить воронку задним числом по сохранённой истории событий. Например, когда обнаружили ошибку в коде уже
#   после запуска рекламы.
#   Возможно, стоит отказаться от функции совсем ввиду заметного усложнения прикладного кода


# TODO Учесть в историях потенциально большое количество пользователей бота и рассылок --> в таблицах БД окажется много записей --> Может сильно просесть производительность
# TODO Нужна возможность выгружать статистику по старым рассылкам с последующим удалением из БД? Или какой-то другой механизм архивирования?
# TODO Если хранить не только конечные состояния лидов, но и историю всех их переходов, то записей станет ещё на порядок больше.
# TODO Как возможное решение проблемы -- вместо одной мега-таблицы с лидами завести много небольших отдельных таблиц. Архивировать таблицы БД целиком.

# TODO Маркетолог -- Посмотреть историю взаимодействия пользователя с рассылкой
#     Отладка новой сложной рассылки


# TODO Маркетолог -- Посмотреть в админке общую схему воронки

# TODO Программист -- Расчитать конверсии по этапам воронки
#   По когорте
#   За период
#   По параметрам состояния
#

# TODO Программист -- Сгенерировать роутер по схеме воронки
# TODO Программист -- Сгенерировать код расчёта конверсий по схеме воронки


# TODO Программист -- Подключить административный интерфейс для расчёта конверсий

# TODO Маркетолог -- Выгрузить лиды через админку
# TODO Маркетолог -- Загрузить лиды через админку


# TODO Маркетолог -- Рассчитать финансовый выхлоп от рассылки
# - Кол-во заказов, оформленных после нажатия по целевой кнопки
# - Сумма заказов, если кнопка вела на разделы в корзине

# TODO Маркетолог -- Оценить эффективность рассылки по цифрам из воронки
# - 0. Количество пользователей в воронке
# - 1. Количество отправленных сообщений
# - 2. Количество доставленных сообщений
# - 3. Количество открытых сообщений
# - 4. Количество нажатий по целевой кнопки
# - 5. Конверсия открытых сообщений относительно доставленных
# - 6. Конверсия доставленных сообщений относительно отправленных
# - 7. Конверсия нажатий по целевой кнопки относительно открытых сообщений

# Программист -- Посчитать конверсии воронки
# - по рассылкам триггерным и разовым
# - по целевым действиям внутри чат-бота
# - по когортам: дата регистрации или рассылки, вариант A/B теста
# - по многим параллельно работающим независимым воронкам
# - по сложным разветвлённым воронкам


# TODO Маркетолог -- Проверить глазами историю событий
#     Дебаг, проверка гипотез
#     Как узнать человекочитаемое название события для менеджера ?
# TODO Маркетолог -- Проиграть историю событий заново, перерасчитать конверсии
#     Код для старой воронки уже удалён из кодовой базы


# TODO Прикладной программист -- Десериализовать события из БД


# TODO Программист -- Заметить чрезмерную нагрузку на БД из-за воронок

# TODO Программист -- Снизить нагрузку на БД из-за воронок

# TODO Прикладной программист -- Сохранить обработанные события в историю в БД
