Чат-бот: !concept
  Описание: |
    Чат-бот -- это приватный чат-бот Telegram, код которого написан на Django Tg Bot Framework с
    помощью private_chats.
  Официальный Tg бот: !example |
    Для чат-бота зарегистрирован отдельный аккаунт бота Telegram. Через этот аккаунт бот получает и отправляет
    сообщения.
  Чат-бот с двумя Tg аккаунтами: !extension |  # TODO описать пример использования
    Один чат-бот действует сразу из-под двух разных аккаунтов бота Telegram.
  Чат-бот под аккаунтом Tg пользователя: !extension |
    Чат-бот действует из-под обычного пользовательского аккаунта, а не с аккаунта бота. Такое возможно с помощью
    библиотек подобных Telethon. Администрация Telegram против такого, но сам фреймворк Django Tg Bot Framework
    такого не запрещает.
    Такой чат-бот не может отправлять сообщения с кнопками, но может реагировать на обычный текстовый ввод.
  Один чат-бот с двумя стейт-машинами: !example |
    Чат-бот одновременно умеет общаться с пользователем в личке и реагировать на Inline Query. Каждому формату
    общения -- своя стейт-машина со специфической логикой.
  Два чат-бота в одном Django-проекте: !example |
    Один веб-сервис обслуживает работу сразу двух разных ботов: один для обычных пользователей, второй для менеджеров.
  Чат-бот с вебхуком: !example |
    Аккаунт бота Telegram настроен на работу через вебхук. Сервер Telegram будет присылать отдельный HTTP запрос
    на указанный вебхук при каждом событии в чате.
  Long polling чат-бот: !example |
    Чат-бот подключается к серверам Telegram через протокол Long Polling.
  Чат-бот c рассылками: !example |
    Чат-бот помимо обычного интерактивного режима "запрос пользователя -- ответ" проводит также и рассылки по базе
    пользователей. Часть таких рассылок запускаются по таймеру, другие -- вручную.
  Групповой чат-бот: !example |
    Бот общается сразу с несколькими пользователями в группе Telegram. Одна стейт-машина принимает сообщения от разных
    пользователей и отправляет сообщения разным.


Сообщение приватного чата: !concept
# TODO написать определение
# TODO описать примеры


Сессия: !concept
  Опеределение: |
    Сессия стейт-машины -- это аналог сессии в браузере. Хранит набор сериализуемых данных. Позволяет для
    отдельного "пользователя" восстановить состояние краулера стейт-машины.
  Сессия без id: !exclusion |
    У любой сессии обязан быть id, позволяющий найти данные и восстановить их перед запуском краулера.
  Активная сессия: !example
# TODO описать примеры


Модель данных сессии: !concept
  Опеределение: Модель Django ORM для хранения данных сессии в базе данных.
  Модель с кастомными полями в БД: !extension

# TODO написать определение
# TODO описать примеры


Состояние приватного чата: !concept
# TODO написать определение
# TODO описать примеры


Редактируемый класс состояния: !concept
  Определение: Класс состояния, поведение которого задаётся через базу данных администратором бота.
  Prompt: !example
  Редирект: !example
  Overwrite: !example |
    Администратор перенастроил бота, чтобы в одном из состояний он вёл себя иначе, чем указано в коде.
  Отправить запрос на вебхук: !extension |
    Переход бота в такой класс состояний приводит к отправке запроса на вебхук внешнего сервиса.
  Embeded code: !extension |
    Пользовательский ввод обрабатывается с помощью кода, написанного администратором бота прямо в админке.
    Например, это может быть js-код.


Стейт-машина: !concept
  Определение: |
    Алгоритм особой структуры, реагирующий на различные внешние события переходом из одного своего состояния в другое.
    Между вызовами стейт-машины её состояние можно сериализовать, записать в БД, а позже восстановить без потерь.
    Англ.: State Machine.
  Многопользовательская стейт-машина: !example |
    Одна стейт-машина используется для взаимодействия с несколькими пользователями. Каждому пользователю -- свою
    отдельную сессию.
  Стейт-машина приватного чат-бота: !example |
    Пользователь общается с ботом в личке. Алгоритм чат-бота задаётся одной стейт-машиной. Каждому
    пользователю -- своя отдельная сессия стейт-машины.
  Абстрактная базовая стейт-машина: !exclusion |
    Стейт-машины настолько отличаются друг от друга, что единый общий интерфейс для них вводить нет смысла.
  Стейт-машина чат-бота c массовой рассылкой: !extension |
    Чат-бот помимо обычного интеграктивного режима "запрос пользователя -- ответ" проводит также и рассылки по базе
    пользователей. Часть таких рассылок запускаются по таймеру или вручную -- без update-события от сервера Telegram.
    Рассылки включаются не через вебхук, а через события внутри веб-сервиса: изменилась запись в БД, время вышло,
    администратор нажал на кнопку в админке.
  Составная стейт-машина: !extension |
    Стейт-машина может использовать сразу несколько роутеров -- первый использует классы состояний из базы данных, а
    второй -- из кода.
  Стейт-машина собрана из разных Django-приложений: !extension |
    Чат-бот такой большой и сложный, что состояния его стейт-машины описаны в разных Django-приложениях.
  Стейт-машина с предобработкой событий: !extension |
    Если код внутри классов состояний стейт-машины получается сложным и запутанным из-за неудобных в обработке событий,
    то в стейт-машину добавляется общая для всех состояний логика нормализации и обработки событий.
  Стейт-машина с кастомным контекстом исполнения: !example |
    Персональный чат-бот запускает стейт-машину, из любой точки которой доступен объект БД `Conversation`.
